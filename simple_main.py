from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import json
import logging
import os
import uuid
import httpx
from typing import AsyncGenerator, Optional
from contextlib import asynccontextmanager
from pydantic import BaseModel
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from slowapi.middleware import SlowAPIMiddleware

load_dotenv()

DEBUG = os.getenv("DEBUG", "false").lower() == "true"
logging.basicConfig(level=logging.DEBUG if DEBUG else logging.INFO)
logger = logging.getLogger(__name__)

limiter = Limiter(key_func=get_remote_address)

# –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ LangChain –¥–ª—è Vercel
class SearchRequest(BaseModel):
    search: str
    thread_id: Optional[str] = None

class SimpleHarryPotterBot:
    def __init__(self):
        self.api_key = os.getenv("ANTHROPIC_API_KEY")
        self.base_url = "https://api.anthropic.com/v1/messages"
        
    async def get_character_info(self, character_name: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ —á–µ—Ä–µ–∑ HP API"""
        try:
            async with httpx.AsyncClient() as client:
                # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                response = await client.get("https://hp-api.onrender.com/api/characters")
                characters = response.json()
                
                # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                found = [c for c in characters if character_name.lower() in c.get('name', '').lower()]
                return found[:3] if found else None
        except Exception as e:
            logger.error(f"Error fetching character: {e}")
            return None
    
    async def stream_response(self, prompt: str) -> AsyncGenerator[str, None]:
        """–ü–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Claude"""
        try:
            headers = {
                "Content-Type": "application/json",
                "X-API-Key": self.api_key,
                "anthropic-version": "2023-06-01"
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ Harry Potter
            system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∏—Ä—É –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞. –û—Ç–≤–µ—á–∞–π —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∏ –∑–Ω–∞–Ω–∏–µ–º –¥–µ–ª–∞ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö, –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è—Ö, —Å–æ–±—ã—Ç–∏—è—Ö –∫–Ω–∏–≥. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞–≥–∏—á–µ—Å–∫–∏–µ —ç–º–æ–¥–∑–∏ ‚ú®ü™Ñ‚ö°"""
            
            payload = {
                "model": "claude-3-sonnet-20240229",
                "max_tokens": 1000,
                "messages": [
                    {
                        "role": "user", 
                        "content": f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å: {prompt}"
                    }
                ],
                "stream": True
            }
            
            async with httpx.AsyncClient() as client:
                async with client.stream(
                    "POST", 
                    self.base_url, 
                    headers=headers, 
                    json=payload,
                    timeout=30.0
                ) as response:
                    async for line in response.aiter_lines():
                        if line.startswith("data: "):
                            data_str = line[6:]
                            if data_str.strip() == "[DONE]":
                                break
                                
                            try:
                                data = json.loads(data_str)
                                if data.get("type") == "content_block_delta":
                                    text = data.get("delta", {}).get("text", "")
                                    if text:
                                        yield f"data: {json.dumps({'content': text}, ensure_ascii=False)}\n\n"
                            except json.JSONDecodeError:
                                continue
                                
        except Exception as e:
            logger.error(f"Streaming error: {e}")
            yield f"data: {json.dumps({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –º–∞–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞'}, ensure_ascii=False)}\n\n"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = SimpleHarryPotterBot()

@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("Simple Harry Potter API initialized")
    yield
    logger.info("Shutting down")

app = FastAPI(
    title="Harry Potter Simple API",
    description="–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –º–∏—Ä–∞ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞ (Vercel)",
    lifespan=lifespan
)

app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)
app.add_middleware(SlowAPIMiddleware)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

async def generate_magical_response(
    search: str,
    thread_id: Optional[str]
) -> AsyncGenerator[str, None]:
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π thread_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if not thread_id or thread_id == "null":
            thread_id = str(uuid.uuid4())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        if any(keyword in search.lower() for keyword in ["–ø–µ—Ä—Å–æ–Ω–∞–∂", "character", "–≥–µ—Ä–æ–π", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ"]):
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            for name in ["harry potter", "–≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä", "hermione", "–≥–µ—Ä–º–∏–æ–Ω–∞", "ron", "—Ä–æ–Ω", "snape", "—Å–Ω–µ–π–ø", "dumbledore", "–¥–∞–º–±–ª–¥–æ—Ä"]:
                if name in search.lower():
                    char_info = await bot.get_character_info(name)
                    if char_info:
                        search += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {json.dumps(char_info[0], ensure_ascii=False)}"
                    break
        
        async for chunk in bot.stream_response(search):
            yield chunk
            
        yield f"data: {json.dumps({'type': 'done', 'thread_id': thread_id}, ensure_ascii=False)}\n\n"
        
    except Exception as e:
        logger.error(f"Error generating response: {e}")
        yield f"data: {json.dumps({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –º–∞–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞'}, ensure_ascii=False)}\n\n"

@app.post("/chat/stream")
@limiter.limit("30/minute")
async def magical_chat_stream(
    search_request: SearchRequest,
    request: Request
):
    if not search_request.search.strip():
        raise HTTPException(status_code=400, detail="–ü–æ–∏—Å–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    logger.info(f"Magical search: {search_request.search[:50]}...")
    
    return StreamingResponse(
        generate_magical_response(search_request.search, search_request.thread_id),
        media_type="text/event-stream",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
            "X-Accel-Buffering": "no"
        }
    )

@app.get("/character/{character_name}")
async def get_character_card(character_name: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
    try:
        char_info = await bot.get_character_info(character_name)
        if char_info:
            return {
                "character": character_name,
                "info": char_info,
                "type": "character_card"
            }
        else:
            raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"Error getting character: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")

@app.get("/spells")
async def get_spells():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("https://hp-api.onrender.com/api/spells")
            return response.json()
    except Exception as e:
        logger.error(f"Error getting spells: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π")

@app.get("/health")
async def health_check():
    return {"status": "–ú–∞–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!", "service": "Harry Potter Simple API"}

@app.get("/")
async def root():
    return {
        "message": "ü™Ñ –ü—Ä–æ—Å—Ç–æ–π –º–∞–≥–∏—á–µ—Å–∫–∏–π API –º–∏—Ä–∞ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞!",
        "endpoints": {
            "stream_chat": "/chat/stream",
            "character_info": "/character/{character_name}",
            "spells": "/spells",
            "health": "/health"
        },
        "note": "Optimized for Vercel deployment"
    }

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel –≥–æ—Ç–æ–≤